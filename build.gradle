apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'


//basics
group 'org.aksw.sparqlmap.sparqlmap-core'
version '0.7.0-SNAPSHOT'

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


// We use Java 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

// maven publication

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java 
            artifact testJar{
                classifier "test"
            }
        }
       
    }
   
    if(shouldPublish()){
        repositories {
            maven {
                credentials {
                    username (project.hasProperty('aksw_archiva_user') != null ? aksw_archiva_user : "")
                    password (project.hasProperty('aksw_archiva_pass') != null ? aksw_archiva_pass : "")
                }

                if(project.version.endsWith('-SNAPSHOT')) {
                    url "http://maven.aksw.org/archiva/repository/snapshots/"
                } else {
                    url "http://maven.aksw.org/archiva/repository/internal/"
                }
            }
        }
    }
}

boolean shouldPublish(){
    def grgit = Grgit.open(dir: '.')
    def name = grgit.branch.current.name
    name.equals('develop') || name.equals('master')
}


buildscript {
    repositories {

        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.4.1'
    }
}
import org.ajoberstar.grgit.*

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    jcenter()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://download.java.net/maven/2/" }
    maven { url "https://repository.apache.org/content/repositories/releases/" }
    maven { url "http://maven.aksw.org/archiva/repository/internal" }
    maven { url "http://maven.aksw.org/archiva/repository/snapshots" }
  }

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}



dependencies {
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile "org.apache.jena:jena-arq:3.1.0"
    compile "com.google.guava:guava:18.0"
    compile 'net.sf.supercsv:super-csv:2.1.0'
    compile 'joda-time:joda-time:2.1'
    compile 'com.aol.simplereact:cyclops-react:1.0.0-RC4'
    compile ('org.apache.metamodel:MetaModel-full:4.5.4') { changing = true}
    compile 'org.eobjects.metamodel-extras:MetaModel-extras:4.4.0'

    compileOnly "org.projectlombok:lombok:1.16.10"
    
    testCompile 'com.spotify:docker-client:2.7.7'
    testCompile 'junit:junit:4.11'
    testCompile 'org.hsqldb:sqltool:2.3.4'
    testCompile 'org.hsqldb:hsqldb:2.3.4'
    testCompile "org.apache.jena:jena-tdb:3.1.0"
    testCompile 'org.springframework:spring-context:4.1.5.RELEASE'
    testCompile 'org.springframework:spring-jdbc:4.1.5.RELEASE'
    testCompile "com.zaxxer:HikariCP:2.4.7"


}

