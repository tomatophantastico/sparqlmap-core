package org.aksw.sparqlmap.core.r2rml;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import jersey.repackaged.com.google.common.collect.Sets;

import org.aksw.sparqlmap.core.db.DBAccess;
import org.aksw.sparqlmap.core.mapper.translate.DataTypeHelper;
import org.aksw.sparqlmap.core.mapper.translate.OptimizationConfiguration;

import util.QuadPosition;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Maps;
import com.google.common.collect.Multimap;

public class JDBCMapping {
	
	static org.slf4j.Logger log = org.slf4j.LoggerFactory
			.getLogger(JDBCMapping.class);
	
	
	
	//general config
	private OptimizationConfiguration optConf;
	
	//database related stuff
	private DBAccess dbconf;
	private DataTypeHelper dth;

	//derived database related stuff
	private JDBCTermMapBinder tfac;
	
	private Multimap<String,JDBCQuadMap> boundQuadMaps = HashMultimap.create();
	private Map<TermMap,JDBCTermMap> termMapBinds = Maps.newHashMap();
	
	/**
	 * get all quad maps generated by a certain R2RML resource
	 * 
	 * @param uri
	 * @return
	 */
	public Set<JDBCQuadMap> getTermMaps(String uri){
	 return Sets.newHashSet(boundQuadMaps.get(uri)); 
	}
	
	
	/**
	 * get the jdbc quad map which was bound by the given R2RML quad map
	 */
	public BoundQuadMap getBoundMap(QuadMap quadMap){
	  BoundQuadMap result = null;
	  
	  for(JDBCQuadMap jQuadMap: boundQuadMaps.values()){
	    if(jQuadMap.getBoundFrom().equals(quadMap)){
	      result = jQuadMap;
	      break;
	    }
	  }
	  return result;
	}
	
	
	public JDBCTermMap getBoundTermMap(TermMap tm){
	  return termMapBinds.get(tm);
	}
	
	

	public Set<JDBCQuadMap> getTripleMaps() {

		return new HashSet<JDBCQuadMap>(boundQuadMaps.values());
	}


  public void add(JDBCQuadMap jQuadMap) {
    this.boundQuadMaps.put(jQuadMap.getUri(), jQuadMap);
    
    
    for(QuadPosition qpos : QuadPosition.values()){
      this.termMapBinds.put(jQuadMap.getBoundFrom().get(qpos),jQuadMap.get(qpos));
    }
    
    
  }






	
	
	
	
	
	
	



	
	

	
	
	
	
}
